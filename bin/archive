#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path(File.join(__FILE__, '../../lib'))

require 'thor'
require 'ap'
require 'slack'
require 'slack-archiver/config'
require 'slack-archiver/channel_history'

class SlackArchiverCLI < Thor
  desc "list", "list channels"
  def list
    config
    r = Slack.channels_list
    error_and_exit(r) unless r['ok']
    r['channels'].each do |channel|
      puts "#{channel['id']} ##{channel['name']}"
    end
  end

  desc "oldest CHANNEL", "oldest message (use channel id)"
  def oldest(channel)
    config
    c = SlackArchiver::ChannelHistory.new(channel_id: channel, count: 1, latest: '0')
    error_and_exit(c.response) unless c.ok?
    #ap [:oldest, c.datetime.(c.latest)]
    ap c.response
  end

  desc "download CHANNEL", "archives a channel (use channel id)"
  def download(channel)
  end

  private

  def error_and_exit(r)
    puts "Error connecting with slack"
    ap r
    exit(1)
  end

  def config
    @config ||= SlackArchiver::Config.
      new(base_dir: File.expand_path(File.join(__FILE__, '../..'))).
      tap do |_config|
        Slack.configure do |slack_config|
          slack_config.token = _config.api_token
        end
    end
  end
end

SlackArchiverCLI.start(ARGV)
